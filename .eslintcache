[{"/Users/gabrielikpaetuk/Desktop/reactCovid/covid19-tracker/src/index.js":"1","/Users/gabrielikpaetuk/Desktop/reactCovid/covid19-tracker/src/reportWebVitals.js":"2","/Users/gabrielikpaetuk/Desktop/reactCovid/covid19-tracker/src/App.js":"3","/Users/gabrielikpaetuk/Desktop/reactCovid/covid19-tracker/src/InfoBox.js":"4","/Users/gabrielikpaetuk/Desktop/reactCovid/covid19-tracker/src/LineGraph.js":"5","/Users/gabrielikpaetuk/Desktop/reactCovid/covid19-tracker/src/Table.js":"6","/Users/gabrielikpaetuk/Desktop/reactCovid/covid19-tracker/src/util.js":"7","/Users/gabrielikpaetuk/Desktop/reactCovid/covid19-tracker/src/Map.js":"8"},{"size":500,"mtime":1607970700056,"results":"9","hashOfConfig":"10"},{"size":362,"mtime":1607970700066,"results":"11","hashOfConfig":"10"},{"size":3300,"mtime":1607991577335,"results":"12","hashOfConfig":"10"},{"size":644,"mtime":1607986173887,"results":"13","hashOfConfig":"10"},{"size":2212,"mtime":1607986216157,"results":"14","hashOfConfig":"10"},{"size":387,"mtime":1607986365476,"results":"15","hashOfConfig":"10"},{"size":138,"mtime":1607986411395,"results":"16","hashOfConfig":"10"},{"size":5470,"mtime":1607993434445,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"ll4ahx",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"20"},"/Users/gabrielikpaetuk/Desktop/reactCovid/covid19-tracker/src/index.js",[],["36","37"],"/Users/gabrielikpaetuk/Desktop/reactCovid/covid19-tracker/src/reportWebVitals.js",[],"/Users/gabrielikpaetuk/Desktop/reactCovid/covid19-tracker/src/App.js",[],"/Users/gabrielikpaetuk/Desktop/reactCovid/covid19-tracker/src/InfoBox.js",[],"/Users/gabrielikpaetuk/Desktop/reactCovid/covid19-tracker/src/LineGraph.js",[],"/Users/gabrielikpaetuk/Desktop/reactCovid/covid19-tracker/src/Table.js",[],"/Users/gabrielikpaetuk/Desktop/reactCovid/covid19-tracker/src/util.js",[],"/Users/gabrielikpaetuk/Desktop/reactCovid/covid19-tracker/src/Map.js",["38","39"],"import React, { useEffect, useRef } from 'react';\nimport { loadModules } from 'esri-loader';\nimport './Map.css';\n\nexport const WebMapView = () => {\n    const mapRef = useRef();\n\n    useEffect(\n      () => {\n        // lazy load the required ArcGIS API for JavaScript modules and CSS\n        loadModules(['esri/Map', 'esri/views/MapView', 'esri/Graphic',\n        'esri/layers/GraphicsLayer'], { css: true })\n        .then(([ArcGISMap, MapView, Graphic, GraphicsLayer]) => {\n\n\n          const map = new ArcGISMap({\n            basemap: 'topo-vector'\n          });\n\n          // load the map view at the ref's DOM node\n          const view = new MapView({\n            container: mapRef.current,\n            map: map,\n            center: [-98.7896876, 30.8260227], // starting longitude, latitude\n            zoom: 2       \n          });\n\n          var graphicsLayer = new GraphicsLayer();\n          map.add(graphicsLayer);\n          \n          var xmlhttp = new XMLHttpRequest();\n\n          // This long function below is what will happen when we get a result\n          // The actual sending of the http request and reading response occurs\n          // after the definition of this function.\n          xmlhttp.onreadystatechange = function() {\n              // Did we get a response (4) and was the response successful (200)\n              if (this.readyState == 4 && this.status == 200) {\n                  \n                  // Convert the JSON text to JSON object that we\n                  // can loop through\n                  var data = JSON.parse(this.responseText);\n  \n                  // The structure of the earthquake data can be found\n                  // at the USGS website:\n                  // https://earthquake.usgs.gov/earthquakes/feed/v1.0/geojson.php\n                  \n                  // Loop through each feature in the features list\n                  for (data of data) {   \n                      \n                      var textSymbol = {\n                          type: \"text\",\n                          color: \"white\"\n                      }\n                      // Define location to draw\n                      // This JS map is expected by ArcGIS to make a graphic\n                      var point = {\n                          type: \"point\",\n                          longitude: data.countryInfo.long,\n                          latitude: data.countryInfo.lat,\n                          textSymbol: textSymbol\n                      };\n                      // Determine symbol color based on the earthquake magnitude\n                      var mag_color;\n                      var mag = data.cases;\n                      if (mag > 2000000) {\n                          mag_color = [245, 93, 105];\n                      }\n                      else if (mag > 500000) {\n                          mag_color = [225, 100, 24];\n                      }\n                      else if (mag > 1000000) {\n                          mag_color = [250, 4, 23];\n                      }\n                      else {\n                          mag_color = [78, 168, 50];\n                      }\n  \n                      // Create a symbol\n                      // This JS map is expected by ArcGIS to make a graphic                 \n                      var simpleMarkerSymbol = {\n                          type: \"simple-marker\",\n                          color: mag_color, \n                          outline: {\n                          color: [255, 255, 255], // white\n                          width: 1\n                          }\n                      };\n              \n                      // Combine location and symbol to create a graphic object\n                      // Also include the earthquake properties data so it\n                      // can be used in the popup template.\n                      var pointGraphic = new Graphic({\n                          geometry: point,\n                          symbol: simpleMarkerSymbol,\n                          //attributes: feature.properties // this is just a JS Map\n                      });\n                      //get the flag of each country.\n                      //var flag = document.getElementById(\"imageid\").src=data.countryInfo.flag\n                      // Add popup.  The items in curly braces within the \n                      // template are the key names from the graphic attributes.\n                      pointGraphic.popupTemplate = {\n                          \"title\" : \"Covid-19\",\n                          \"content\" : `<b>Cases</b>: ${data.cases}<br>Death<b>: ${data.deaths}<br>Recovered<b>: ${data.recovered}<br>Test<b>: ${data.tests}<br>Flag<b>: ${data.countryInfo.flag} <br>Location</b>: ${data.country}<br><b>`\n                      }\n              \n                      // Add the graphic (with its popup) to the graphics layer\n                      graphicsLayer.add(pointGraphic);\n                  } // End of Loop\n              }\n          }; // End of XML Call back Function\n  \n          // Time to actually send the GET request to the USGS.  When we get a response\n          // it will call and execute the function we defined above.\n          xmlhttp.open(\"GET\", \"https://disease.sh/v3/covid-19/countries\", true);\n          xmlhttp.send();\n\n    \n\n          return () => {\n            if (view) {\n              // destroy the map view\n              view.destroy();\n            }\n          };\n        });\n      }\n    );\n\n    return <div className=\"webmap\" ref={mapRef} />;\n};",{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","severity":1,"message":"45","line":38,"column":35,"nodeType":"46","messageId":"47","endLine":38,"endColumn":37},{"ruleId":"44","severity":1,"message":"45","line":38,"column":55,"nodeType":"46","messageId":"47","endLine":38,"endColumn":57},"no-native-reassign",["48"],"no-negated-in-lhs",["49"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]